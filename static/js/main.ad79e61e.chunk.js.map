{"version":3,"sources":["useKeepScrollPosition.js","useOnScreen.js","useMessages.js","App.js","index.js"],"names":["useKeepScrollPosition","deps","containerRef","useRef","previousScrollPosition","useMemo","current","container","scrollHeight","scrollTop","useLayoutEffect","useOnScreen","ref","useState","isIntersecting","setIntersecting","useEffect","observer","IntersectionObserver","entry","observe","disconnect","getMessages","data","x","push","id","faker","random","uuid","message","lorem","words","in","datatype","boolean","useMessages","messages","setMessages","lastMessageRef","setLastMessageRef","old","concat","App","className","map","m","i","rootElement","document","getElementById","ReactDOM","render"],"mappings":"8NA4BeA,EA1Be,WAAgB,IAAfC,EAAc,uDAAP,GAC9BC,EAAeC,iBAAO,MACtBC,EAAyBD,iBAAO,GAkBtC,OAhBAE,mBAAQ,WACN,UAAIH,QAAJ,IAAIA,KAAcI,QAAS,CACzB,IAAMC,EAAS,OAAGL,QAAH,IAAGA,OAAH,EAAGA,EAAcI,QAChCF,EAAuBE,SACZ,OAATC,QAAS,IAATA,OAAA,EAAAA,EAAWC,eAAX,OAA0BD,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAWE,cAJpC,YAMAR,IAEPS,2BAAgB,WACd,UAAIR,QAAJ,IAAIA,KAAcI,QAAS,CACzB,IAAMC,GAAwB,OAAZL,QAAY,IAAZA,OAAA,EAAAA,EAAcI,UAAW,GAC3CC,EAAUE,WACC,OAATF,QAAS,IAATA,OAAA,EAAAA,EAAWC,cAAeJ,EAAuBE,WAJxC,YAMRL,IAEA,CACLC,eACAE,2BCFWO,EApBK,SAACC,GACnB,MAA0CC,oBAAS,GAAnD,mBAAOC,EAAP,KAAuBC,EAAvB,KAgBA,OAdAC,qBAAU,WACR,IAAMC,EAAW,IAAIC,sBAAqB,gBAAEC,EAAF,2BACxCJ,EAAgBI,EAAML,mBAOxB,OAJIF,EAAIN,SACNW,EAASG,QAAQR,EAAIN,SAGhB,WACLW,EAASI,gBAEV,CAACT,IAEGE,GCdHQ,EAAc,WAElB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAKE,KAAK,CACRC,GAAIC,IAAMC,OAAOC,OACjBC,QAASH,IAAMI,MAAMC,QACrBC,GAAIN,IAAMO,SAASC,YAIvB,OAAOZ,GAuBMa,EApBK,WAClB,MAAgCvB,mBAASS,KAAzC,mBAAOe,EAAP,KAAiBC,EAAjB,KACQpC,EAAiBF,EAAsB,CAACqC,IAAxCnC,aACR,EAA4CW,mBAAS,MAArD,mBAAO0B,EAAP,KAAuBC,EAAvB,KACM1B,EAAiBH,EAAY,CAAEL,QAASiC,IAQ9C,OANAvB,qBAAU,WACJF,GACFwB,GAAY,SAACG,GAAD,OAASnB,IAAcoB,OAAOD,QAE3C,CAAC3B,IAEG,CACLuB,WACAC,cACApC,eACAsC,sB,OC/BW,SAASG,IACtB,MAAsDP,IAA9CC,EAAR,EAAQA,SAAUnC,EAAlB,EAAkBA,aAAcsC,EAAhC,EAAgCA,kBAEhC,OACE,sBAAKI,UAAU,MAAf,UACE,uEACA,qBAAKA,UAAU,OAAOhC,IAAKV,EAA3B,SACGmC,EAASQ,KAAI,SAACC,EAAGC,GAAJ,OACZ,qBAEEH,UAAS,kBAAaE,EAAEb,GAAK,cAAgB,gBAF/C,SAIE,qBAAKrB,IAAK,SAACA,GAAD,OAAgB,IAANmC,EAAUP,EAAkB5B,GAAO,MAAvD,SACGkC,EAAEhB,WAJAgB,EAAEpB,YCPnB,IAAMsB,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACT,EAAD,MAEFK,I","file":"static/js/main.ad79e61e.chunk.js","sourcesContent":["import { useRef, useLayoutEffect, useMemo } from \"react\";\n\nconst useKeepScrollPosition = (deps = []) => {\n  const containerRef = useRef(null);\n  const previousScrollPosition = useRef(0);\n\n  useMemo(() => {\n    if (containerRef?.current) {\n      const container = containerRef?.current;\n      previousScrollPosition.current =\n        container?.scrollHeight - container?.scrollTop;\n    }\n  }, [...deps]);\n\n  useLayoutEffect(() => {\n    if (containerRef?.current) {\n      const container = containerRef?.current || {};\n      container.scrollTop =\n        container?.scrollHeight - previousScrollPosition.current;\n    }\n  }, [...deps]);\n\n  return {\n    containerRef,\n    previousScrollPosition\n  };\n};\n\nexport default useKeepScrollPosition;\n","import { useState, useEffect } from \"react\";\n\nconst useOnScreen = (ref) => {\n  const [isIntersecting, setIntersecting] = useState(false);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(([entry]) =>\n      setIntersecting(entry.isIntersecting)\n    );\n\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [ref]);\n\n  return isIntersecting;\n};\n\nexport default useOnScreen;\n","import faker from \"faker\";\nimport { useState, useEffect } from \"react\";\nimport useKeepScrollPosition from \"./useKeepScrollPosition\";\nimport useOnScreen from \"./useOnScreen\";\n\nconst getMessages = () => {\n  const data = [];\n  for (let x = 0; x < 20; x++) {\n    data.push({\n      id: faker.random.uuid(),\n      message: faker.lorem.words(),\n      in: faker.datatype.boolean()\n    });\n  }\n\n  return data;\n};\n\nconst useMessages = () => {\n  const [messages, setMessages] = useState(getMessages());\n  const { containerRef } = useKeepScrollPosition([messages]);\n  const [lastMessageRef, setLastMessageRef] = useState(null);\n  const isIntersecting = useOnScreen({ current: lastMessageRef });\n\n  useEffect(() => {\n    if (isIntersecting) {\n      setMessages((old) => getMessages().concat(old));\n    }\n  }, [isIntersecting]);\n\n  return {\n    messages,\n    setMessages,\n    containerRef,\n    setLastMessageRef\n  };\n};\n\nexport default useMessages;\n","import \"./styles.css\";\nimport useMessages from \"./useMessages\";\n\nexport default function App() {\n  const { messages, containerRef, setLastMessageRef } = useMessages();\n\n  return (\n    <div className=\"App\">\n      <h1>Keep Scroll Positon On Chat Re-render</h1>\n      <div className=\"chat\" ref={containerRef}>\n        {messages.map((m, i) => (\n          <div\n            key={m.id}\n            className={`message ${m.in ? \"message--in\" : \"message--out\"}`}\n          >\n            <div ref={(ref) => (i === 0 ? setLastMessageRef(ref) : null)}>\n              {m.message}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}